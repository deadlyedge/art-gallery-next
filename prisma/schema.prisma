// generator client {
//   provider = "prisma-client-js"
// }
generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output   = "../src/db"
  fileName = "types.ts"
  // Optionally generate runtime enums to a separate file
  //  enumFileName = "enums.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id       String @id @default(cuid())
  userId   String @unique
  name     String
  imageUrl String
  email    String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contents Content[]
  events   Event[]
  members  Member[]
}

model Event {
  id          String  @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  inviteCode  String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  contents Content[]
  members  Member[]

  @@index([profileId])
}

model Member {
  id        String     @id @default(cuid())
  role      MemberRole @default(GUEST)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
  DirectMessage          DirectMessage[]
  messages               Message[]

  eventId   String
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([eventId])
}

model Content {
  id          String      @id @default(cuid())
  type        ContentType @default(IMAGE)
  title       String
  imageUrl    String?
  description String?
  isPublic    Boolean?    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId   String
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  messages Message[]

  @@index([profileId])
  @@index([eventId])
}

model Message {
  id      String  @id @default(cuid())
  text    String
  fileUrl String?
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(cuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(cuid())
  text    String
  fileUrl String?
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
}
