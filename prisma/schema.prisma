generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id        String    @id @default(cuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contents  Content[]
  events    Event[]
  members   Member[]
}

model Event {
  id          String    @id @default(cuid())
  imageUrl    String
  inviteCode  String    @unique
  profileId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  description String?
  contents    Content[]
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members     Member[]

  @@index([profileId])
}

model Member {
  id                     String          @id @default(cuid())
  role                   MemberRole      @default(GUEST)
  profileId              String
  eventId                String
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")
  DirectMessage          DirectMessage[]
  event                  Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile                Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  messages               Message[]

  @@index([profileId])
  @@index([eventId])
}

model Content {
  id          String      @id @default(cuid())
  type        ContentType @default(IMAGE)
  profileId   String
  eventId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  imageUrl    String?
  title       String
  description String?
  isPublic    Boolean?    @default(false)
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile     Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  messages    Message[]

  @@index([profileId])
  @@index([eventId])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  fileUrl   String?
  memberId  String
  contentId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([memberId])
}

model Conversation {
  id             String          @id @default(cuid())
  memberOneId    String
  memberTwoId    String
  memberOne      Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id             String       @id @default(cuid())
  fileUrl        String?
  memberId       String
  conversationId String
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  text           String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
  @@index([conversationId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
}
